import pytest
import json
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../application")))
from compound_interest import app, db
from compound_interest.routes import home_page, register_page, login_page, investments_page, add_investment_page, logout_page



@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client


def register_user(client):
    data = {
        "username": "test_user",
        "email": "test@example.com",
        "password1": "password123",
        "password2": "password123"
    }
    return client.post('/register/', data=data)
def test_register_user(client):
    register_user(client)

def delete_user():
    db.users.drop()
   

def login_user(client):
    return client.post('/login/', data={"username": "test_user", "password": "password123"})


def add_investment():
    investment = {
            "username": "test_user",
            "initial_deposit": 1000,
            "monthly_deposit": 100,
            "yearly_interest": 5,
            "years_of_investment": 10,
            "total_deposit": 13000.0,
            "total_interest": 4412.19,
            "total_money": 17412.19
        }
    db.investments.insert_one(investment)


def delete_investment():
    db.investments.drop()


def logout(client):
    return client.get('/logout/')


def test_home_page(client):
    response = client.get('/')
    assert response.status_code == 200
    assert b'Welcome to Jonathan and Binyamin Compound Interest Website' in response.data
    response = client.get('/home/')
    assert response.status_code == 200
    assert b'Welcome to Jonathan and Binyamin Compound Interest Website' in response.data

def test_user_registration(client):
    # Simulate user registration by sending a POST request
    response = client.post('/register/', data={
        'username': 'testuser',
        'email': 'test@example.com',
        'password1': 'testpassword',
        'password2': 'testpassword',
    }, follow_redirects=True)

    # Assert that the registration was successful
    assert response.status_code == 200  # Check for a successful response
    assert b'Account created successfully!' in response.data 

def test_investments_page(client):
    """
    Test that the investments page is accessible and that the 
    investments are displayed correctly.
    """
    # Register a user and login
    register_user(client)
    login_user(client)
    # Add an investment
    add_investment()
    # Get the investments page
    response = client.get('/investments/')
    # Assert that the response is successful
    assert response.status_code == 200
    # Assert that the investment is displayed correctly
    investment = json.loads(response.data.decode('utf-8'))
    assert investment['username'] == 'test_user'
    assert investment['initial_deposit'] == 1000
    assert investment['monthly_deposit'] == 100
    assert investment['yearly_interest'] == 5
    assert investment['years_of_investment'] == 10
    assert investment['total_deposit'] == 13000.0
    assert investment['total_interest'] == 4412.19
    assert investment['total_money'] == 17412.19
    # Delete the investment
    delete_investment()
    # Get the investments page
    response = client.get('/investments/')
    # Assert that the response is successful
    assert response.status_code == 200
    # Assert that the investment is not displayed
    investments = json.loads(response.data.decode('utf-8'))
    assert 'test_user' not in investments



def test_investments_page(client):
    register_user(client)
    response = client.get('/investments/')
    assert response.status_code == 302
    
    login_user(client)
    add_investment()
    response = client.get('/investments/')
    # assert response.status_code == 200
    assert response.location == 'http://app/investments/'


    response = client.post('/investments/', data={"investment_id": "your_investment_id"})
    assert response.status_code == 200 
    assert b'Investment deleted successfully.' in response.get_data()




def test_add_investment_page(client):
    login(client)

    response = client.get('/add_investment/')
    assert response.status_code == 200
    assert b'Add Investment' in response.data  
    data = {
        "initial_deposit": 1000,
        "monthly_deposit": 100,
        "yearly_interest": 5,
        "years_of_investment": 10
    }
    response = client.post('/add_investment/', data=data, follow_redirects=True)
    assert response.status_code == 302
    assert b'Investment added successfully.' in response.data

def test_register_page(client):
    response = client.get('/register/')
    assert response.status_code == 200
    assert b'Register Page' in response.data  
    data = {
        "username": "new_user",
        "email": "new_user@example.com",
        "password1": "password123",
        "password2": "password123",
    }
    response = client.post('/register/', data=data)
    assert response.status_code == 200
    assert b'Please Create your Account' in response.data

def test_login_page(client):
    response = client.get('/login/')
    assert response.status_code == 200
    assert b'Please Login' in response.data  

    data = {
        "username": "test_user",
        "password": "password123",
    }
    response = client.post('/login/', data=data, follow_redirects=True)
    assert response.status_code == 200

    data = {
        "username": "invalid_user",
        "password": "invalid_password",
    }
    response = client.post('/login/', data=data, follow_redirects=True)
    assert response.status_code == 200

def test_logout_page(client):
    response = client.get('/logout/')
    assert response.status_code == 302